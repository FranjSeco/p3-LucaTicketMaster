package com.example.demo.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.EventModel;
import com.example.demo.response.EventResponse;
import com.example.demo.service.EventService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping("/events")
@Tag(name = "events", description = "Events API")
public class EventController {

   private static final Logger log = LoggerFactory.getLogger(EventController.class);

   @Autowired
   private EventService eventService;
   
   @Operation(summary = "Buscar todos los eventos", description = "Cuando se hace la petición se devuelve una List<EventResponse> ", tags= {"event"})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Lista localizada", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = EventResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "Petición no válida (NO implementado) ", content = @Content),
			@ApiResponse(responseCode = "404", description = "Lista no encontrada (NO implementado)", content = @Content) })
  
   @GetMapping
   public List<EventResponse> getAll() {
	   log.info("Se accede al controllador");
	   return eventService.showAllEvents();
   }
   
   @Operation(summary = "Añadir nuevo evento", description = "Dado un EventResponse, se añade a la Base de Datos", tags= {"event"})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Evento añadido", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = EventResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "Petición no válida (NO implementado) ", content = @Content),
			@ApiResponse(responseCode = "404", description = "Evento no añadido, ruta incorrecta (NO implementado)", content = @Content) })
  
   @PostMapping("/add")
   public EventResponse addEvent(@RequestBody EventModel event) {
	   return eventService.addEvent(event);
   }
   
   @Operation(summary = "Buscar eventos por nombre", description = "Dado un nombre devuelve un objeto EventResponse", tags= {"event"})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Evento localizado", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = EventResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "Petición no válida (NO implementado) ", content = @Content),
			@ApiResponse(responseCode = "404", description = "Evento no encontrado (NO implementado)", content = @Content) })
   
   @GetMapping("/{name}")
   public EventResponse getDetails(@PathVariable String name) {
	   return eventService.getDetails(name);
   }
   
   @Operation(summary = "Updatear eventos encontrados por nombre", description = "Dado un nombre permite modificar la información de dicho Evento", tags= {"event"})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Evento actualizado", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = EventResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "Petición no válida (NO implementado) ", content = @Content),
			@ApiResponse(responseCode = "404", description = "Evento no encontrado (NO implementado)", content = @Content) })
  
   @PutMapping("/{name}")
   public EventResponse modifyEvent(@PathVariable String name, @RequestBody EventModel event) {
	   return eventService.findByIdAndUpdate(name, event);
   }
   
   @Operation(summary = "Eliminar eventos por nombre", description = "Dado un nombre elimina ese objeto EventResponse", tags= {"event"})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Evento eliminado", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = EventResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "Petición no válida (NO implementado) ", content = @Content),
			@ApiResponse(responseCode = "404", description = "Evento no encontrado (NO implementado)", content = @Content) })
  
   @DeleteMapping("/{name}")
   public EventResponse deleteEvent(@PathVariable String name) {
	   return eventService.deleteEvent(name);
   }
   

}